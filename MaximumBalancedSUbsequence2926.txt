It is also similar to LIS concept but all test cases is not passed by either Top-down and bottom down approach

ðŸ’¡Learnt about how i can use unordered map as dp when contraints are quite large
ðŸ’¡stl===>>> *max_element(begin(nums), end(nums))
ðŸ’¡max<long long>(taken, not_taken)


FIrst two approach
   unordered_map<string, long long> mp; //For memoization
    long long solve(int i, int prev, vector<int>& nums) {
        if(i >= nums.size()) {
            return 0;
        }

        string key = to_string(i) + "_" + to_string(prev);
        if(mp.find(key) != mp.end()) {
            return mp[key];
        }

        long long taken = INT_MIN;

        if(prev == -1 || nums[i] - i >= nums[prev] - prev) {
            taken = nums[i] + solve(i+1, i, nums);
        }
        
        long long not_taken = solve(i+1, prev, nums);
        return mp[key] = max<long long>(taken, not_taken);
    }

    long long maxBalancedSubsequenceSum(vector<int>& nums) {
        int maxEl = *max_element(begin(nums), end(nums));
        if(maxEl <= 0) {
            return maxEl;
        }
        return solve(0, -1, nums);
    }



2.

 long long maxBalancedSubsequenceSum(vector<int>& nums) {
        int n = nums.size();
        
        int maxEl = *max_element(begin(nums), end(nums));
        if(maxEl <= 0) {
            return maxEl;
        }

        vector<long long> t(n);
        for(int i = 0; i<n; i++) {
            t[i] = nums[i];
        }

        long long maxSum = INT_MIN;
        for(int i = 0; i<n; i++) {

            for(int j = 0; j<i; j++) {

                if(nums[i] - i >= nums[j] - j) {
                    t[i] = max<long long>(t[i], t[j] + nums[i]);
                    maxSum = max<long long>(maxSum, t[i]);
                }

            }
        }

        return maxSum > maxEl ? maxSum : maxEl;
    }


optimized
Time : O(nlogn)

 map<int,long long>mp;
        long long ans=INT_MIN;
        for(int i=0;i<nums.size();i++)
        {
            auto it=mp.upper_bound(nums[i]-i);
            long long sum=nums[i];
            if(it!=mp.begin())
            {
                it--;
                sum+=it->second;
            }
            mp[nums[i]-i]=max(mp[nums[i]-i],sum);
            it=mp.upper_bound(nums[i]-i);
            while(it!=mp.end()&& it->second<=sum)
            {
                mp.erase(it++);
            }
            ans=max(ans,sum);
        }
        return ans;
    }