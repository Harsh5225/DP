It is similar to longest increasing subsequence

ðŸ’¡"You can select pairs in any order."---> This shows, you can apply the sorting.


Top-down
class Solution {
public:
//LIS pattern
int dp[1005][1005];
int f(vector<vector<int>>&pairs,int prev,int idx)
{
    if(idx>=pairs.size()) return 0;
    if(prev!=-1 && dp[idx][prev]!=-1) return dp[idx][prev];
    int take=0;
    if(prev==-1 || pairs[idx][0]>pairs[prev][1])
    { 
     take=1+f(pairs,idx,idx+1);
    }
    int skip=f(pairs,prev,idx+1);
    if(prev!=-1)
    dp[idx][prev]=max(take,skip);
    return max(take,skip);
}
    int findLongestChain(vector<vector<int>>& pairs) {
        memset(dp,-1,sizeof dp);
        sort(begin(pairs),end(pairs));
        return f(pairs,-1,0);
    }
};


botton-top
 int findLongestChain(vector<vector<int>>& pairs) {
        // memset(dp,-1,sizeof dp);
        sort(begin(pairs),end(pairs));
        // return f(pairs,-1,0);
        vector<int>t(pairs.size(),1);
        int maxlis=1;
        for(int i=0;i<pairs.size();i++)
        {
            for(int j=0;j<i;j++)
            {
              if(pairs[i][0]>pairs[j][1])
              {
                t[i]=max(t[i],t[j]+1);
                maxlis=max(maxlis,t[i]);
              }
            }
        }
        return maxlis;
    }
