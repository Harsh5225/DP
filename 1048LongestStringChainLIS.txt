ðŸ’¡ if length(word[i])==length(word[j]) || length(word[i])-length(word[j])!=1 we cannot insert one exactly letter which make the word both equal.
ðŸ’¡Greedy-> When we get maximum answer possible, when words are arranged accordint to the length
ðŸ’¡LIS CONCEPT



Top-down
class Solution {
public:
int dp[1005][1005];
bool check(string &s,string&t)
{
    if(s.length()>=t.length() || s.length()-t.length()!=-1) return false;
    int i=0,j=0;
    while(i<s.length() && j<t.length())
    {
        if(s[i]==t[j])
        {
            i++;
        }
        j++;
    }
    return i==s.length();
}
int f(vector<string>& words,int p,int idx)
{
    if(idx>=words.size()) return 0;
     if(p!=-1 && dp[p][idx]!=-1) return dp[p][idx];
    int take=0;
    if(p==-1 || check(words[p],words[idx]))
    {
        take=1+f(words,idx,idx+1);
    }
    int skip=f(words,p,idx+1);
    if(p!=-1)
    {
        dp[p][idx]=max(take,skip);
    }
    return max(take,skip);
}
static bool cmp(string&s,string&t)
{
    return s.length()<t.length();
}
    int longestStrChain(vector<string>& words) {
        memset(dp,-1,sizeof dp);
        sort(words.begin(),words.end(),cmp);
        return f(words,-1,0);
    }
};


bottom-top

class Solution {
public:
// int dp[1005][1005];
bool check(string &s,string&t)
{
    if(s.length()>=t.length() || s.length()-t.length()!=-1) return false;
    int i=0,j=0;
    while(i<s.length() && j<t.length())
    {
        if(s[i]==t[j])
        {
            i++;
        }
        j++;
    }
    return i==s.length();
}
// int f(vector<string>& words,int p,int idx)
// {
//     if(idx>=words.size()) return 0;
//      if(p!=-1 && dp[p][idx]!=-1) return dp[p][idx];
//     int take=0;
//     if(p==-1 || check(words[p],words[idx]))
//     {
//         take=1+f(words,idx,idx+1);
//     }
//     int skip=f(words,p,idx+1);
//     if(p!=-1)
//     {
//         dp[p][idx]=max(take,skip);
//     }
//     return max(take,skip);
// }
static bool cmp(string&s,string&t)
{
    return s.length()<t.length();
}
    int longestStrChain(vector<string>& words) {
        // memset(dp,-1,sizeof dp);
        sort(words.begin(),words.end(),cmp);
        // return f(words,-1,0);
        int n=words.size();
        vector<int>dp(n,1);
        int maxWC=1;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(check(words[j],words[i]))
                {
                   dp[i]=max(dp[i],dp[j]+1);
                   maxWC=max(maxWC,dp[i]);
                }
            }
        }
        return maxWC;
    }
};