Q.198. House Robber


TOP_DOWN approach

class Solution {
public:
vector<int>dp;
int f(vector<int>& nums,int i)
{
    if(i==nums.size()-1) return nums[i];
    if(i==nums.size()-2) return max(nums[i],nums[i+1]);
    if(dp[i]!=-1) return dp[i];
    return dp[i]=max(nums[i]+f(nums,i+2),(0+f(nums,i+1)));
}
    int rob(vector<int>& nums) {
        dp.resize(nums.size(),-1);
        return f(nums,0);
    }
};


Botton-top approach
 
 int rob(vector<int>& nums) {
        int n = nums.size();

        if (n == 1) {
            return nums[0];
        }

        vector<int> dp(n, 0);

        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);

        for (int i = 2; i < n; i++) {
            dp[i] = max(dp[i - 1], nums[i] + dp[i - 2]);
        }

        return dp[n - 1];        
    }

Space Constant

class Solution {
public:
    int rob(vector<int>& nums) {
        // constant space mai
        int n=nums.size();
        if(n==1) return nums[0];
                int maximum=max(nums[n-1],nums[n-2]);
                cout<<maximum<<" ";
                int a=nums[n-1];
                int b=maximum;
                for(int i=n-3;i>=0;i--)
                {
                    if(nums[i]+a>b)
                    {
                        int c=b;
                        b=a+nums[i];
                        a=c;
                    }
                    else{
                        a=b;
                    }
                }
return b;
    }
};